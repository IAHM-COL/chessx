name: CI

on:
  push:
    branches: [ master, ci-sandbox ]
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    strategy:
      matrix:
        os: ['ubuntu-latest']
    runs-on: ${{ matrix.os }}
    env:
      QT_VERSION: '5.14.2'
  
    steps:
    - name: Lint Ansible Playbook
      # replace "master" with any valid ref
      uses: ansible/ansible-lint-action@master
      with:
        # [required]
        # Paths to ansible files (i.e., playbooks, tasks, handlers etc..)
        # or valid Ansible directories according to the Ansible role
        # directory structure.
        # If you want to lint multiple ansible files, use the following syntax
        # targets: |
        #   playbook_1.yml
        #   playbook_2.yml
        targets: ""
        # [optional]
        # Arguments to override a package and its version to be set explicitly.
        # Must follow the example syntax.
        override-deps: |
          ansible==2.9
          ansible-lint==4.2.0
        # [optional]
        # Arguments to be passed to the ansible-lint

        # Options:
        #   -q                    quieter, although not silent output
        #   -p                    parseable output in the format of pep8
        #   --parseable-severity  parseable output including severity of rule
        #   -r RULESDIR           specify one or more rules directories using one or
        #                         more -r arguments. Any -r flags override the default
        #                         rules in ansiblelint/rules, unless -R is also used.
        #   -R                    Use default rules in ansiblelint/rules in addition to
        #                         any extra
        #                         rules directories specified with -r. There is no need
        #                         to specify this if no -r flags are used
        #   -t TAGS               only check rules whose id/tags match these values
        #   -x SKIP_LIST          only check rules whose id/tags do not match these
        #                         values
        #   --nocolor             disable colored output
        #   --exclude=EXCLUDE_PATHS
        #                         path to directories or files to skip. This option is
        #                         repeatable.
        #   -c C                  Specify configuration file to use. Defaults to ".ansible-lint"
        args: ""
    - name: Install pulseaudio
      if: ${{ runner.os == 'Linux' }}
      run: brew install pulseaudio
    - name: Look for cached Qt ${{ env.QT_VERSION }}
      id: cache-qt
      uses: actions/cache@v1.2.0
      with:
        path: ${{ runner.workspace }}/Qt${{ env.QT_VERSION }}
        key: ${{ runner.os }}-Qt${{ env.QT_VERSION }}
    - name: Install Qt ${{ env.QT_VERSION }}
      uses: jurplel/install-qt-action@v2.6.2
      with:
        version: ${{ env.QT_VERSION }}
        dir: ${{ runner.workspace }}/Qt${{ env.QT_VERSION }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Checkout sources
      uses: actions/checkout@v2.1.0
    - name: configure
      run: >-
        cmake -S . -B _build
        -DCMAKE_PREFIX_PATH="$(brew --prefix)/opt/pulseaudio/lib/cmake/PulseAudio"
    - name: make
      run: cmake --build _build
    - name: make test
      run: cd _build && ctest -VV

  build:
    # name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        arch: [x64, x86]
        qt: ['5.14.2']
        exclude:
          - os: macos-latest
            arch: x86
          - os: ubuntu-latest
            arch: x86
          - os: windows-latest
            arch: x86
        include:
          - os: macos-latest
            triplet: x64-osx
            vcpkg_packages: 'zlib'
          - os: windows-latest
            arch: x64
            triplet: x64-windows
            qt_arch: win64_msvc2017_64
            vcpkg_packages: 'zlib'
#          - os: windows-latest
#            arch: x86
#            triplet: x86-windows
#            qt_arch: win32_msvc2017
#            vcpkg_packages: 'zlib'

    env:
      VCPKG_COMMIT_ID: 'c7ab9d3110813979a873b2dbac630a9ab79850dc' # tag 2020.04

    steps:
    - name: Install pulseaudio
      if: ${{ runner.os == 'Linux' }}
      run: brew install pulseaudio
    - name: Look for cached Qt ${{ matrix.qt }}
      id: cache-qt
      uses: actions/cache@v1.2.0
      with:
        path: ${{ runner.workspace }}
        key: ${{ runner.os }}-Qt${{ matrix.qt }}-${{ matrix.arch }}
    - name: Install Qt ${{ matrix.qt }}
      uses: jurplel/install-qt-action@v2.6.2
      with:
        version: ${{ matrix.qt }}
        arch: ${{ matrix.qt_arch }}
        dir: ${{ runner.workspace }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Checkout sources
      uses: actions/checkout@v2.1.0

    # see example at https://github.com/lukka/CppBuildTasks-Validation/blob/master/.github/workflows/hosted-basic.yml
    - uses: lukka/get-cmake@latest

    #- name: dir
    #  run: gci -recurse ${{ runner.workspace }}
    - name: Restore artifacts, or run vcpkg, build and cache artifacts
      uses: lukka/run-vcpkg@v2
      id: runvcpkg
      with:
        vcpkgArguments: '${{ matrix.vcpkg_packages }}'
        vcpkgTriplet: ${{ matrix.triplet }}
        vcpkgDirectory: ${{ runner.workspace }}/b/vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
    #- name: Prints outputs of run-vcpkg task
    #run: echo "'${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}' '${{  steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}' "
    - name: configure && make
      uses: lukka/run-cmake@v2
      id: runcmake_cmd
      with:
        cmakeGenerator: Ninja
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        useVcpkgToolchainFile: true
        cmakeAppendedArgs: ${{ matrix.cmakeConfigureArgs }}
        vcpkgTriplet: ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}
        buildDirectory: '${{ runner.workspace }}/b/ninja/'
    - name: make test
      if: ${{ runner.os != 'Windows' }}
      run: cd '${{ runner.workspace }}/b/ninja' && ctest -V

  build-min:
    runs-on: ubuntu-16.04
    env:
      QT_VERSION: '5.7'
  
    steps:
    - name: Cache Qt ${{ env.QT_VERSION }}
      id: cache-qt
      uses: actions/cache@v1.2.0
      with:
        path: ${{ runner.workspace }}/Qt${{ env.QT_VERSION }}
        key: ${{ runner.os }}-Qt${{ env.QT_VERSION }}

    - name: Install Qt ${{ env.QT_VERSION }}
      uses: jurplel/install-qt-action@v2.6.2
      with:
        version: ${{ env.QT_VERSION }}
        dir: ${{ runner.workspace }}/Qt${{ env.QT_VERSION }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Checkout sources
      uses: actions/checkout@v2.1.0

    - name: configure
      run: >-
        cmake -S . -B _build
        -DENABLE_SOUNDS=OFF
        -DENABLE_TTS=OFF
        -DENABLE_SCID_SUPPORT=OFF
    - name: make
      run: cmake --build _build
    - name: make test
      run: cd _build && ctest -V

